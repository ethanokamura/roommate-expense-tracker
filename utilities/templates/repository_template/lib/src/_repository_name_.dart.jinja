import 'dart:convert';
import 'package:api_client/api_client.dart';
import 'package:app_core/app_core.dart';
import 'package:flutter/foundation.dart';
{% for model in models_to_generate %}
import 'models/{{ model }}.dart';
{% endfor %}
import 'failures.dart';

/// Repository class for managing {{ object_name }}Repository methods and data
class {{ object_name }}Repository {
  /// Constructor for {{ object_name }}Repository.
  {{ object_name }}Repository({
    CacheManager? cacheManager,
  }) : _cacheManager = cacheManager ?? GetIt.instance<CacheManager>();

  final CacheManager _cacheManager;

  {% for model in models_to_generate %}
  {{ model | snake_to_pascal }} _{{ model | snake_to_camel }} = {{ model | snake_to_pascal }}.empty;
  {{ model | snake_to_pascal }} get {{ model | snake_to_camel }} => _{{ model | snake_to_camel }};

  List<{{ model | snake_to_pascal }}> _{{ model | snake_to_camel }}List = [];
  List<{{ model | snake_to_pascal }}> get {{ model | snake_to_camel }}List => _{{ model | snake_to_camel }}List;
  {% endfor %}
}

extension Create on {{ object_name }}Repository {
  {% for model in models_to_generate %}

  /// Insert [{{model | snake_to_pascal}}] object to Rds.
  ///
  /// Return data if successful, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info and table_key_info.not_null %}
  {% for nn in table_key_info.not_null %}
  /// Requires the [{{ nn | snake_to_camel }}] to create the object
  {% endfor %}
  {% endif %}
  Future<{{model | snake_to_pascal}}> create{{ model | snake_to_pascal }}({
    {% if table_key_info and table_key_info.not_null %}
    {% for nn in table_key_info.not_null %}
    required String {{ nn | snake_to_camel }},
    {% endfor %}
    {% endif %}
    required String token,
    bool forceRefresh = true,
  }) async {
    // Get cache key
    final cacheKey = generateCacheKey({
      'object': '{{ model }}',
      {% if table_key_info and table_key_info.not_null %}
      {% for nn in table_key_info.not_null %}
      {{model | snake_to_pascal}}.{{ nn | snake_to_camel }}Converter: {{ nn | snake_to_camel }},
      {% endfor %}
      {% endif %}
    });

    // Check cache if not forcing refresh
    if (!forceRefresh) {
      final cachedData = await _cacheManager.getCachedHttpResponse(cacheKey);
      if (cachedData != null) {
        try {
          final Map<String, dynamic> jsonData = jsonDecode(cachedData);
          _{{model | snake_to_camel}} = {{model | snake_to_pascal}}.converterSingle(jsonData);
          return _{{model | snake_to_camel}};
        } catch (e) {
          debugPrint('Error decoding cached {{model | snake_to_camel}} data for key $cacheKey: $e');
        }
      }
    }

    // No valid cache, or forceRefresh is true, fetch from API
    try {
      // Retrieve new row after inserting
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{model | dashed}}/',
        method: 'POST',
        headers: {
          'Authorization': 'Bearer $token',
        },
        payload: {
          {% if table_key_info and table_key_info.not_null %}
          {% for nn in table_key_info.not_null %}
          '{{ nn }}': {{ nn | snake_to_camel }},
          {% endfor %}
          {% endif %}
        },
      );
      debugPrint('{{ object_name }} post response: $response');
      if (response['status'] != '201') {
        throw {{ object_name }}Failure.fromCreate();
      }
      // Success
      final Map<String, dynamic> jsonData = response['data']!;
      final String responseBody = jsonEncode(jsonData); // Encode to string for caching

      // Cache the successful response with a specific duration
      await _cacheManager.cacheHttpResponse(
        key: cacheKey,
        responseBody: responseBody,
        cacheDuration: const Duration(minutes: 60),
      );

      _{{model | snake_to_camel}} = {{model | snake_to_pascal}}.converterSingle(jsonData);
      return _{{model | snake_to_camel}};
    } catch (e) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $e');
      throw {{ object_name }}Failure.fromCreate();
    }
  }
  {% endfor %}
}

extension Read on {{ object_name }}Repository {
  {% for model in models_to_generate %}
  /// Fetch list of all [{{model | snake_to_pascal}}] objects from Rds.
  ///
  /// Return data if exists, or an empty list
  Future<List<{{model | snake_to_pascal}}>> fetchAll{{model | snake_to_pascal}}({
    required String token,
    required String orderBy,
    required bool ascending,
    bool forceRefresh = false,
  }) async {
    // Get cache key
    final cacheKey = generateCacheKey({
      'order_by': orderBy,
      'ascending': ascending.toString(),
      'object': '{{ model }}',
    });

    if (!forceRefresh) {
      final cachedData = await _cacheManager.getCachedHttpResponse(cacheKey);
      if (cachedData != null) {
        try {
          final List<dynamic> jsonData = jsonDecode(cachedData);
          _{{model | snake_to_camel}}List = {{model |snake_to_pascal}}.converter(jsonData.cast<Map<String, dynamic>>());
          return _{{model | snake_to_camel}}List;
        } catch (e) {
          debugPrint('Error decoding cached {{model | snake_to_camel}} list data for key $cacheKey: $e');
        }
      }
    }

    // No valid cache, or forceRefresh is true, fetch from API
    try {
      if (orderBy.isEmpty) orderBy = {{ model | snake_to_pascal }}.createdAtConverter;
      final ascendingQuery = ascending ? 'asc' : 'desc';
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{ model | dashed }}?sort_by=$orderBy&sort_order=$ascendingQuery',
        method: 'GET',
        headers: {
          'Authorization': 'Bearer $token',
        },
      );
      debugPrint('{{ object_name }} GET all {{ model }} response: $response');
      if (response['status'] != '200') {
        throw {{ object_name }}Failure.fromGet();
      }

      final List<dynamic> jsonData = response['data']!;
      // Success
      final String responseBody = jsonEncode(jsonData); // Encode to string for caching

      // Cache the successful response with a specific duration
      await _cacheManager.cacheHttpResponse(
        key: cacheKey,
        responseBody: responseBody,
        cacheDuration: const Duration(minutes: 60),
      );

      _{{model | snake_to_camel}}List = {{model | snake_to_pascal}}.converter(jsonData.cast<Map<String, dynamic>>());
      return _{{model | snake_to_camel}}List;
    } catch (e) {
      debugPrint('Failure to fetch all {{model}}: $e');
      throw {{ object_name }}Failure.fromGet();
    }
  }

  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info %}
  {% if table_key_info.primary %}
  {% for pk in table_key_info.primary %}

  /// Fetch single() [{{model | snake_to_pascal}}] object from Rds.
  ///
  /// Return data if exists, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  /// Requires the [{{ pk | snake_to_camel }}] for lookup
  Future<{{model | snake_to_pascal}}> fetch{{model | snake_to_pascal}}With{{ pk | snake_to_pascal }}({
    required String {{ pk | snake_to_camel }},
    required String token,
    bool forceRefresh = false, // Added parameter to force API call
  }) async {
    // Get cache key
    final cacheKey = generateCacheKey({
      'object': '{{ model }}',
      {{model | snake_to_pascal}}.{{ pk | snake_to_camel }}Converter: {{ pk | snake_to_camel }},
    });

    if (!forceRefresh) {
      final cachedData = await _cacheManager.getCachedHttpResponse(cacheKey);
      if (cachedData != null) {
        try {
          final Map<String, dynamic> jsonData = jsonDecode(cachedData);
          _{{model | snake_to_camel}} = {{model | snake_to_pascal}}.converterSingle(jsonData);
          return _{{model | snake_to_camel}};
        } catch (e) {
          debugPrint('Error decoding cached {{model | snake_to_camel}} data for key $cacheKey: $e');
        }
      }
    }

    // No valid cache, or forceRefresh is true, fetch from API
    try {
      // Retrieve new row after inserting
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{ model | dashed }}/${{ pk | snake_to_camel }}', {# Removed trailing comma #}
        method: 'GET',
        headers: {
          'Authorization': 'Bearer $token',
        },
      );
      debugPrint('{{ object_name }} GET response: $response');
      if (response['status'] != '200') {
        throw {{ object_name }}Failure.fromGet();
      }

      final Map<String, dynamic> jsonData = response['data']!;
      final String responseBody = jsonEncode(jsonData);

      // Cache the successful response with a specific duration
      await _cacheManager.cacheHttpResponse(
        key: cacheKey,
        responseBody: responseBody,
        cacheDuration: const Duration(minutes: 60),
      );

      _{{model | snake_to_camel}} = {{model | snake_to_pascal}}.converterSingle(jsonData);

      return _{{model | snake_to_camel}};
    } catch (e) {
      debugPrint('Failure to fetch {{model | snake_to_camel}} with {{pk | snake_to_camel}}: $e');
      throw {{ object_name }}Failure.fromGet();
    }
  }

  {% endfor %}
  {% endif %}
  {% if table_key_info.foreign %}
  {% for fk in table_key_info.foreign %}
  /// Fetch list of all [{{model | snake_to_pascal}}] objects from Rds.
  ///
  /// Requires the [{{ fk | snake_to_camel }}] for lookup
  Future<List<{{model | snake_to_pascal}}>> fetchAll{{model | snake_to_pascal}}With{{ fk | snake_to_pascal }}({
    required String {{ fk | snake_to_camel }},
    required String token,
    required String orderBy,
    required bool ascending,
    bool forceRefresh = false,
  }) async {
    // Get cache key
    final cacheKey = generateCacheKey({
      'object': '{{ model }}',
      'order_by': orderBy,
      'ascending': ascending.toString(),
      '{{ fk }}': {{ fk | snake_to_camel }},
    });

    if (!forceRefresh) {
      final cachedData = await _cacheManager.getCachedHttpResponse(cacheKey);
      if (cachedData != null) {
        try {
          final List<dynamic> jsonData = jsonDecode(cachedData);
          _{{model | snake_to_camel}}List = {{model |snake_to_pascal}}.converter(jsonData.cast<Map<String, dynamic>>());
          return _{{model | snake_to_camel}}List;
        } catch (e) {
          debugPrint('Error decoding cached {{model | snake_to_camel}} list data for key $cacheKey: $e');
        }
      }
    }

    // No valid cache, or forceRefresh is true, fetch from API
    try {
      if (orderBy.isEmpty) orderBy = {{ model | snake_to_pascal }}.createdAtConverter;
      final ascendingQuery = ascending ? 'asc' : 'desc';
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{ model | dashed }}?{{ fk }}=${{ fk | snake_to_camel }}&sort_by=$orderBy&sort_order=$ascendingQuery',
        method: 'GET',
        headers: {
          'Authorization': 'Bearer $token',
        },
      );
      debugPrint('{{ object_name }} GET all {{ model }} response: $response');
      if (response['status'] != '200') {
        throw {{ object_name }}Failure.fromGet();
      }

      final List<dynamic> jsonData = response['data']!;
      // Success
      final String responseBody = jsonEncode(jsonData); // Encode to string for caching

      // Cache the successful response with a specific duration
      await _cacheManager.cacheHttpResponse(
        key: cacheKey,
        responseBody: responseBody,
        cacheDuration: const Duration(minutes: 60),
      );

      _{{model | snake_to_camel}}List = {{model | snake_to_pascal}}.converter(jsonData.cast<Map<String, dynamic>>());
      return _{{model | snake_to_camel}}List;
    } catch (e) {
      debugPrint('Failure to fetch all {{model}}: $e');
      throw {{ object_name }}Failure.fromGet();
    }
  }
  {% endfor %}
  {% endif %}
  {% if table_key_info.unique %}
  {% for unique_key in table_key_info.unique %}

  /// Fetch single() [{{model | snake_to_pascal}}] object from Rds.
  ///
  /// Return data if exists, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  /// Requires the [{{ unique_key | snake_to_camel }}] for lookup
  Future<{{model | snake_to_pascal}}> fetch{{model | snake_to_pascal}}With{{ unique_key | snake_to_pascal }}({
    required String {{ unique_key | snake_to_camel }},
    required String token,
    bool forceRefresh = false,
  }) async {
    // Get cache key
    final cacheKey = generateCacheKey({
      'object': '{{ model }}',
      {{model | snake_to_pascal}}.{{ unique_key | snake_to_camel }}Converter: {{ unique_key | snake_to_camel }},
    });

    if (!forceRefresh) {
      final cachedData = await _cacheManager.getCachedHttpResponse(cacheKey);
      if (cachedData != null) {
        try {
          final Map<String, dynamic> jsonData = jsonDecode(cachedData);
          _{{ model | snake_to_camel }} = {{ model | snake_to_pascal }}.converterSingle(jsonData);
          return _{{ model | snake_to_camel }};
        } catch (e) {
          debugPrint('Error decoding cached {{ model | snake_to_camel }} data for key $cacheKey: $e');
        }
      }
    }

    // No valid cache, or forceRefresh is true, fetch from API
    try {
      // Build query parameters
      final queryParams = <String, dynamic>{
        '{{ unique_key }}': {{ unique_key | snake_to_camel }}
      };
      final queryString = queryParams.entries.map((e) => '${e.key}=${e.value}').join('&');

      // Retrieve new row after inserting
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{ model | dashed }}?$queryString',
        method: 'GET',
        headers: {
          'Authorization': 'Bearer $token',
        },
      );

      debugPrint('{{ object_name }} GET response: $response');

      // Failure
      if (response['status'] != '200') {
        throw {{ object_name }}Failure.fromGet();
      }

      // Success
      final Map<String, dynamic> jsonData = response['data']!;
      final String responseBody = jsonEncode(jsonData);

      // Cache the successful response with a specific duration
      await _cacheManager.cacheHttpResponse(
        key: cacheKey,
        responseBody: responseBody,
        cacheDuration: const Duration(minutes: 60),
      );

      _{{model | snake_to_camel}} = {{model | snake_to_pascal}}.converterSingle(jsonData);

      return _{{model | snake_to_camel}};
    } catch (e) {
      debugPrint('Failure to fetch {{model | snake_to_camel}} with unique details: $e');
      throw {{ object_name }}Failure.fromGet();
    }
  }
  {% endfor %}
  {% endif %}
  {% endif %}
  {% endfor %}
}

extension Update on {{ object_name }}Repository {
  {% for model in models_to_generate %}
  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info and table_key_info.primary %}
  {% for pk in table_key_info.primary %}

  /// Update the given [{{model | snake_to_pascal}}] in Rds.
  ///
  /// Return data if successful, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  /// Requires the [{{ pk | snake_to_camel }}] to update the object
  Future<{{model | snake_to_pascal}}> update{{model | snake_to_pascal}}({
    required String {{ pk | snake_to_camel }},
    required {{model | snake_to_pascal}} new{{model | snake_to_pascal}}Data,
    required String token,
  }) async {
    try {
      // Get cache key
      final cacheKey = generateCacheKey({
        'object': '{{ model }}',
        {{model | snake_to_pascal}}.{{ pk | snake_to_camel }}Converter: {{ pk | snake_to_camel }},
      });
      // Prepare data for insertion
      final data = new{{model | snake_to_pascal}}Data.toJson();

      // Retrieve new row after inserting
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{ model | dashed }}/${{ pk | snake_to_camel }}',
        method: 'PATCH',
        headers: {
          'Authorization': 'Bearer $token',
        },
        payload: data,
      );

      debugPrint('{{ object_name }} PATCH response: $response');

      // Failure
      if (response['status'] != '200') {
        throw {{ object_name }}Failure.fromGet();
      }

      // Success
      final Map<String, dynamic>? jsonData = response['data'];
      final String responseBody = jsonEncode(jsonData);

      // Cache the successful response with a specific duration
      await _cacheManager.cacheHttpResponse(
        key: cacheKey,
        responseBody: responseBody,
        cacheDuration: const Duration(minutes: 60),
      );

      // Update local object
      _{{model | snake_to_camel}} = response['data'] != null
          ? {{model | snake_to_pascal}}.converterSingle(jsonData!)
          : {{model | snake_to_pascal}}.empty;

      // Return data
      return _{{model | snake_to_camel}};
    } catch (e) {
      debugPrint('Failure to update {{model | snake_to_camel}}: $e');
      throw {{ object_name }}Failure.fromGet();
    }
  }
  {% endfor %}
  {% endif %}
  {% endfor %}
}

extension Delete on {{ object_name }}Repository {
  {% for model in models_to_generate %}
  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info and table_key_info.primary %}
  {% for pk in table_key_info.primary %}

  /// Delete the given [{{model | snake_to_pascal}}] from Rds.
  ///
  /// Requires the [{{ pk | snake_to_camel }}] to delete the object
  Future<String> delete{{model | snake_to_pascal}}({
    required String {{ pk | snake_to_camel }},
    required String token,
  }) async {
    try {
      // Retrieve new row after inserting
      final response = await dioRequest(
        dio: Dio(),
        apiEndpoint: '/{{ model | dashed }}/${{ pk | snake_to_camel }}',
        method: 'DELETE',
        headers: {
          'Authorization': 'Bearer $token',
        },
      );

      debugPrint('{{ object_name }} DELETE response: $response');

      // Failure
      if (response['status'] != '204') {
        throw {{ object_name }}Failure.fromDelete();
      }

      // Ensure valid response
      return response['message']!;
    } catch (e) {
      debugPrint('Failure to delete {{model | snake_to_camel}}: $e');
      throw {{ object_name }}Failure.fromGet();
    }
  }

  {% endfor %}
  {% endif %}
  {% endfor %}
}
