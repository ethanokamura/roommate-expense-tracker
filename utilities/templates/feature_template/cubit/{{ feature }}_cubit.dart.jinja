import 'package:app_core/app_core.dart';
import 'package:flutter/foundation.dart';
import 'package:{{feature}}_repository/{{feature}}_repository.dart';

part '{{feature}}_state.dart';

class {{feature | snake_to_pascal}}Cubit extends Cubit<{{feature | snake_to_pascal}}State> {
  /// Creates a new instance of [{{feature | snake_to_pascal}}Cubit].
  ///
  /// Requires a [{{feature | snake_to_pascal}}Repository] to handle data operations.
  {{feature | snake_to_pascal}}Cubit({
    required {{feature | snake_to_pascal}}Repository {{feature | snake_to_camel}}Repository,
  })  : _{{feature | snake_to_camel}}Repository = {{feature | snake_to_camel}}Repository,
        super(const {{feature | snake_to_pascal}}State.initial());

  final {{feature | snake_to_pascal}}Repository _{{feature | snake_to_camel}}Repository;

  {% for model in models_to_generate %}
  /// Insert [{{model | snake_to_pascal}}] object to Rds.
  ///
  /// Return data if successful, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info and table_key_info.not_null %}
  {% for nn in table_key_info.not_null %}
  /// Requires the [{{ nn | snake_to_camel }}] to create the object
  {% endfor %}
  {% endif %}
  Future<void> create{{ model | snake_to_pascal }}({
    {% if table_key_info and table_key_info.not_null %}
    {% for nn in table_key_info.not_null %}
    required String {{ nn | snake_to_camel }},
    {% endfor %}
    {% endif %}
    required String token,
    bool forceRefresh = true,
  }) async {
    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final {{ model | snake_to_camel }} = await _{{feature | snake_to_camel}}Repository.create{{ model | snake_to_pascal }}(
        {% if table_key_info and table_key_info.not_null %}
        {% for nn in table_key_info.not_null %}
        {{ nn | snake_to_camel }}: {{ nn | snake_to_camel }},
        {% endfor %}
        {% endif %}
        token: token,
        forceRefresh: forceRefresh,
      );
      emit(state.from{{ model | snake_to_pascal }}Loaded({{ model | snake_to_camel }}: {{ model | snake_to_camel }},),);
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }
  {% endfor %}

  {% for model in models_to_generate %}
  /// Fetch list of all [{{model | snake_to_pascal}}] objects from Rds.
  ///
  /// Return data if exists, or an empty list
  Future<void> fetchAll{{model | snake_to_pascal}}({
    required String token,
    required String orderBy,
    required bool ascending,
    bool forceRefresh = false,
  }) async {
    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final {{ model | snake_to_camel }}List = await _{{feature | snake_to_camel}}Repository.fetchAll{{ model | snake_to_pascal }}(
        token: token,
        orderBy: orderBy,
        ascending: ascending,
        forceRefresh: forceRefresh,
      );
      emit(state.from{{ model | snake_to_pascal }}ListLoaded({{ model | snake_to_camel }}List: {{ model | snake_to_camel }}List,),);
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }

  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info %}
  {% if table_key_info.primary %}
  {% for pk in table_key_info.primary %}

  /// Fetch single() [{{model | snake_to_pascal}}] object from Rds.
  ///
  /// Return data if exists, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  /// Requires the [{{ pk | snake_to_camel }}] for lookup
  Future<void> fetch{{model | snake_to_pascal}}With{{ pk | snake_to_pascal }}({
    required String {{ pk | snake_to_camel }},
    required String token,
    bool forceRefresh = false, // Added parameter to force API call
  }) async {
    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final {{ model | snake_to_camel }} = await _{{feature | snake_to_camel}}Repository.fetch{{ model | snake_to_pascal }}With{{ pk | snake_to_pascal }}(
        {{ pk | snake_to_camel }}: {{ pk | snake_to_camel }},
        token: token,
        forceRefresh: forceRefresh,
      );
      emit(state.from{{ model | snake_to_pascal }}Loaded({{ model | snake_to_camel }}: {{ model | snake_to_camel }},),);
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }

  {% endfor %}
  {% endif %}
  {% if table_key_info.foreign %}
  {% for fk in table_key_info.foreign %}
  /// Fetch list of all [{{model | snake_to_pascal}}] objects from Rds.
  ///
  /// Requires the [{{ fk | snake_to_camel }}] for lookup
  Future<void> fetchAll{{model | snake_to_pascal}}With{{ fk | snake_to_pascal }}({
    required String {{ fk | snake_to_camel }},
    required String token,
    required String orderBy,
    required bool ascending,
    bool forceRefresh = false,
  }) async {

    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final {{ model | snake_to_camel }}List = await _{{feature | snake_to_camel}}Repository.fetchAll{{model | snake_to_pascal}}With{{ fk | snake_to_pascal }}(
        {{ fk | snake_to_camel }}: {{ fk | snake_to_camel }},
        token: token,
        orderBy: orderBy,
        ascending: ascending,
        forceRefresh: forceRefresh,
      );
      emit(state.from{{ model | snake_to_pascal }}ListLoaded({{ model | snake_to_camel }}List: {{ model | snake_to_camel }}List,),);
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }

  {% endfor %}
  {% endif %}
  {% if table_key_info.unique %}
  {% for unique_key in table_key_info.unique %}

  /// Fetch single() [{{model | snake_to_pascal}}] object from Rds.
  ///
  /// Return data if exists, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  /// Requires the [{{ unique_key | snake_to_camel }}] for lookup
  Future<void> fetch{{model | snake_to_pascal}}With{{ unique_key | snake_to_pascal }}({
    required String {{ unique_key | snake_to_camel }},
    required String token,
    bool forceRefresh = false,
  }) async {
    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final {{ model | snake_to_camel }} = await _{{feature | snake_to_camel}}Repository.fetch{{model | snake_to_pascal}}With{{ unique_key | snake_to_pascal }}(
        {{ unique_key | snake_to_camel }}: {{ unique_key | snake_to_camel }},
        token: token,
        forceRefresh: forceRefresh,
      );
      emit(state.from{{ model | snake_to_pascal }}Loaded({{ model | snake_to_camel }}: {{ model | snake_to_camel }},),);
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }
  {% endfor %}
  {% endif %}
  {% endif %}
  {% endfor %}

  {% for model in models_to_generate %}
  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info and table_key_info.primary %}
  {% for pk in table_key_info.primary %}

  /// Update the given [{{model | snake_to_pascal}}] in Rds.
  ///
  /// Return data if successful, or an empty instance of [{{model | snake_to_pascal}}].
  ///
  /// Requires the [{{ pk | snake_to_camel }}] to update the object
  Future<void> update{{model | snake_to_pascal}}({
    required String {{ pk | snake_to_camel }},
    required {{model | snake_to_pascal}} new{{model | snake_to_pascal}}Data,
    required String token,
  }) async {
    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final {{ model | snake_to_camel }} = await _{{feature | snake_to_camel}}Repository.update{{ model | snake_to_pascal }}(
        {{ pk | snake_to_camel }}: {{ pk | snake_to_camel }},
        new{{model | snake_to_pascal}}Data: new{{model | snake_to_pascal}}Data,
        token: token,
      );
      emit(state.from{{ model | snake_to_pascal }}Loaded({{ model | snake_to_camel }}: {{ model | snake_to_camel }},),);
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }
  {% endfor %}
  {% endif %}
  {% endfor %}

  {% for model in models_to_generate %}
  {% set table_key_info = schema_key_mapping.get(model) %}
  {% if table_key_info and table_key_info.primary %}
  {% for pk in table_key_info.primary %}

  /// Delete the given [{{model | snake_to_pascal}}] from Rds.
  ///
  /// Requires the [{{ pk | snake_to_camel }}] to delete the object
  Future<void> delete{{model | snake_to_pascal}}({
    required String {{ pk | snake_to_camel }},
    required String token,
  }) async {
    emit(state.fromLoading());
    try {
      // Retrieve new row after inserting
      final message = await _{{feature | snake_to_camel}}Repository.delete{{ model | snake_to_pascal }}(
        {{ pk | snake_to_camel }}: {{ pk | snake_to_camel }},
        token: token,
      );
      debugPrint(message);
      emit(state.fromLoaded());
    } on {{ object_name }}Failure catch (failure) {
      debugPrint('Failure to create {{model | snake_to_camel}}: $failure');
      emit(state.from{{ object_name }}Failure(failure));
    }
  }

  {% endfor %}
  {% endif %}
  {% endfor %}
}
